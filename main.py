import library.my_database as DbClass
import library.game_settings as Config
import telebot
import time
import threading
from telebot import types

WordGenerator = Config.WordGen(Config.dic_path)
Database = DbClass.Database(Config.db_path)
ExecutorBot = None

GameSession = list()
SoloPlay = dict()  # –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏ ID –∏–≥—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—É—é –∏–≥—Ä–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –°–æ–ª–æ
SoloGames = dict()  # –°–ª–æ–≤–∞—Ä—å –∏–∑ —É–≥–∞–¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –°–æ–ª–æ
MessagesSolo = dict()


def console_log(text: str = "Empty log"):
    print(f'[LOG] {text}')

markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton("–ù–∞—á–∞—Ç—å")
markup.add(item1)


def bot_polling():
    global ExecutorBot
    console_log("–ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è.")
    while True:
        try:
            console_log("–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
            ExecutorBot = telebot.TeleBot(Config.token, num_threads=30)
            Handler()
            ExecutorBot.polling(none_stop=True, interval=Config.interval_to_response, timeout=Config.timeout)
        except Exception as ex:
            console_log(f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—à–∏–±–∫–∞: {ex}.")
            ExecutorBot.stop_polling()
            time.sleep(Config.timeout)
        else:
            console_log("–ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            ExecutorBot.stop_polling()
            break




def send_message(chat_id, text: str, disable_ntf: bool = False):
    return ExecutorBot.send_message(chat_id, text, parse_mode='html', disable_notification=disable_ntf,
                                    reply_markup=markup)


def send_sticker(chat_id, stick_id: str):
    return ExecutorBot.send_sticker(chat_id, sticker=stick_id, reply_markup=markup)


def remove_message(chat_id, message_id):
    return ExecutorBot.delete_message(chat_id, message_id)


def welcome_on_server(PlayerID, Message):
    if 'start' in Message:
        send_sticker(PlayerID, 'CAACAgIAAxkBAAEK0zBlY8-TMit9H_quY45jrvG4Xi9k5AACgBMAApRmuEihPFaGjuIpgTME')
        send_message(PlayerID, Config.HelloWorld)
        return
    Message = str(Message.split(' ')[0])
    if (len(Message) > 14) or (len(Message) < 4) or (not (Message.isascii())):
        return send_message(PlayerID, f"""
–ü—Ä–æ—á—Ç–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞.
""")
    if (Database.PlayerNickIsUsed(Message)):
        return send_message(PlayerID, Config.ReRead)
    Database.PlayerCreate(PlayerID, Message)
    Player = Database.PlayerGet(PlayerID)
    send_message(PlayerID, f"""
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, <a href = "tg://user?id={PlayerID}">{Player['nick']}</a> [{Player['id']}]!
–¢–µ–ø–µ—Ä—å —Ç—ã –æ–¥–∏–Ω –∏–∑ –Ω–∞—Å.
""")
    send_sticker(PlayerID, 'CAACAgIAAxkBAAEK00plY-AC8yGS7-qkQnYPpWHyhsKSBQACTyEAAsGPOErFNaTJGRW8-zME')
    console_log(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {Message} | TelegramID: {PlayerID}")
    return


def SoloMode(PlayerID, m_message, MessageID):
    GameSession.append(PlayerID)
    user_player = Database.PlayerGet(PlayerID)
    game_id = SoloPlay[user_player['id']]
    guessed_word = SoloGames[game_id]
    game = Database.get_info(game_id)
    m_message = str(m_message)
    if (len(m_message) != 1) and (len(m_message) != len(game['word'])):
        GameSession.remove(PlayerID)
        return send_message(PlayerID, "‚ùå –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –±—É–∫–≤—É –∏–ª–∏ –Ω–∞–∑–æ–≤–∏—Ç–µ —Å–ª–æ–≤–æ —Ü–µ–ª–∏–∫–æ–º!")
    if (len(m_message) == len(game['word'])):
        m_message = m_message.replace('—ë', '–µ')
        if m_message.lower() == game['word']:
            SoloGames.pop(game['id'])
            SoloPlay.pop(user_player['id'])
            Database.game_change_status(game['id'], 'played')
            Database.game_change_value(game['id'], 'end_ts', int(time.time()))
            Database.PlayerIncreaseScore(user_player['id'], Database.get_info(game['id'])['attemps'] + 2)
            user_player = Database.PlayerGet(PlayerID)
            send_message(PlayerID, f"""
ü•á –£—Ä–∞! –í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–∂–∏–ª–∏ —ç–∫–∑–∞–º–µ–Ω - <b>{game['word']}</b>.
–í–∞—à–∞ –∂–∏–∑–Ω—å —Å–ø–∞—Å–µ–Ω–∞ –∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–≤–æ–π –∑–∞—Å–ª—É–∂–µ–Ω–Ω—ã–π –æ—Ç–ª 10. 
–¢–µ–ø–µ—Ä—å —É –≤–∞—Å <b>{user_player['score']}</b> –æ—á–∫–æ–≤.
""")
            GameSession.remove(PlayerID)
            return
        for i in (MessagesSolo[game_id]):
            remove_message(PlayerID, i.message_id)
        if game['attemps'] <= 2:
            Database.game_change_value(game['id'], 'attemps', 0)
            Database.game_change_status(game['id'], 'played')
            Database.game_change_value(game['id'], 'end_ts', int(time.time()))
            game = Database.get_info(game['id'])
            MessagesSolo[game_id] = word_guessing(PlayerID, game)
            send_message(PlayerID, f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í–∞—Å –∑–∞—Ñ–∞—á–∏–ª–∏. –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å –Ω–∞ –ø–µ—Ä–µ—Å–¥–∞—á—É. –í—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ - <b>{game['word']}</b>.")
            SoloGames.pop(game['id'])
            SoloPlay.pop(user_player['id'])
            GameSession.remove(PlayerID)
            return
        Database.game_change_value(game['id'], 'attemps', game['attemps'] - 2)
        game = Database.get_info(game['id'])
        MessagesSolo[game_id] = word_guessing(PlayerID, game)
        GameSession.remove(PlayerID)
        return
    Letter = m_message
    Letter = Letter.lower()
    Letter = Letter.replace('—ë', '–µ')
    if (Letter not in game['word']) and (game['attemps'] <= 1):
        for i in (MessagesSolo[game_id]):
            remove_message(PlayerID, i.message_id)
        Database.game_change_value(game['id'], 'attemps', 0)
        Database.game_change_status(game['id'], 'played')
        Database.game_change_value(game['id'], 'end_ts', int(time.time()))
        game = Database.get_info(game['id'])
        MessagesSolo[game_id] = word_guessing(PlayerID, game)
        SoloGames.pop(game['id'])
        SoloPlay.pop(user_player['id'])
        GameSession.remove(PlayerID)
        return send_message(PlayerID,
                           f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í–∞—Å –∑–∞—Ñ–∞—á–∏–ª–∏. –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å –Ω–∞ –ø–µ—Ä–µ—Å–¥–∞—á—É - <b>{game['word']}</b>.")
    if (Letter not in game['word']):
        for i in (MessagesSolo[game_id]):
            remove_message(PlayerID, i.message_id)
        Database.game_change_value(game['id'], 'attemps', game['attemps'] - 1)
        game = Database.get_info(game['id'])
        MessagesSolo[game_id] = word_guessing(PlayerID, game)
        GameSession.remove(PlayerID)
        return
    if (Letter in game['word']):
        if Letter in SoloGames[game['id']]:
            remove_message(PlayerID, MessageID)
            GameSession.remove(PlayerID)
            return send_message(PlayerID, f"‚ùå –í—ã —É–∂–µ —É–≥–∞–¥—ã–≤–∞–ª–∏ –¥–∞–Ω–Ω—É—é –±—É–∫–≤—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–ª—Ñ–∞–≤–∏—Ç!")
        remove_message(PlayerID, MessageID)
        for i in (MessagesSolo[game_id]):
            remove_message(PlayerID, i.message_id)
        SoloGames[game['id']].append(Letter)
        MessagesSolo[game_id] = word_guessing(PlayerID, game)
        guessed_word = True
        for i in game['word']:
            if i not in SoloGames[game['id']]:
                guessed_word = False
        if guessed_word:
            SoloGames.pop(game['id'])
            SoloPlay.pop(user_player['id'])
            Database.game_change_status(game['id'], 'played')
            Database.game_change_value(game['id'], 'end_ts', int(time.time()))
            Database.PlayerIncreaseScore(user_player['id'], Database.get_info(game['id'])['attemps'] + 2)
            user_player = Database.PlayerGet(PlayerID)
            send_message(PlayerID, f"""
ü•á –£—Ä–∞! –í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–∂–∏–ª–∏ —ç–∫–∑–∞–º–µ–Ω - <b>{game['word']}</b>.
–í–∞—à–∞ –∂–∏–∑–Ω—å —Å–ø–∞—Å–µ–Ω–∞ –∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–≤–æ–π –∑–∞—Å–ª—É–∂–µ–Ω–Ω—ã–π –æ—Ç–ª 10. 
–¢–µ–ø–µ—Ä—å —É –≤–∞—Å <b>{user_player['score']}</b> –æ—á–∫–æ–≤.
""")
            GameSession.remove(PlayerID)
            return
        GameSession.remove(PlayerID)
        return
    GameSession.remove(PlayerID)
    return

def Fucker(PlayerID, Game):
    if (Game['attemps'] + 2 == 10) or (Game['attemps'] + 2 == 9) or (Game['attemps'] + 2 == 8):
        return '—Ö–∞–ª—è–≤–∞'
    elif (Game['attemps'] + 2 == 7) or (Game['attemps'] + 2 == 6) or (Game['attemps'] + 2 == 5):
        return '–ü–æ–ª—É—Ñ–∞–∫–µ—Ä'
    elif (Game['attemps'] + 2 == 4) or (Game['attemps'] + 2 == 3):
        return '–§–∞–∫–µ—Ä'
    else:
        return '–≤–∞—Å –∑–∞—Ñ–∞—á–∏–ª'

def word_guessing(PlayerID, Game):
    Player = Database.PlayerGet(PlayerID)
    word = ""
    for i in Game['word']:
        if i in SoloGames[Game['id']]:
            word = word + i + ' '
        else:
            word = word + '_ '
    text = ""
    message_id = send_message(PlayerID, f"""
<b>{word}</b>
{text}

–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {Game['attemps']}
""")
    send_message(PlayerID, f"""
                                üéÅ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –≤–∞—à–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ <b>{Mark(PlayerID, Game)}</b> <b>{Game['attemps'] + 2}</b> -. –ü—Ä–∏ –æ—à–∏–±–∫–µ,–≤—ã –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Ñ–∞–∫–µ—Ä—É –í—ã—à–µ —É—Ä–æ–≤–Ω—è –∏ –≤–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ–Ω–∏–∂–∞–µ—Ç—Å—è –Ω–∞ 1 –±–∞–ª–ª .
                                """)

    sticker_id = send_sticker(PlayerID, Config.Stickers[Game['attemps']])
    send_message(PlayerID,
                f"–í–∞—à —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä <b>{Fucker(PlayerID, Game)}</b>")
    return (message_id, sticker_id)
    return (message_id,)
def Mark(PlayerID, Game):
    if (Game['attemps'] + 2 == 10) or (Game['attemps'] + 2 == 9) or (Game['attemps'] + 2 == 8):
        return '–æ—Ç–ª'
    elif (Game['attemps'] + 2 == 7) or (Game['attemps'] + 2 == 6) or (Game['attemps'] + 2 == 5):
        return '—Ö–æ—Ä'
    elif (Game['attemps'] + 2 == 4) or (Game['attemps'] + 2 == 3):
        return '—É–¥'
    else: return '–Ω–µ—É–¥'

def Handler():
    @ExecutorBot.message_handler(content_types=["text"])
    def Analyzer(message):
        if (int(message.date) + 5) < int(time.time()):
            return
        player_id = message.chat.id
        user_message = message.text
        user_message_id = message.message_id
        if not (Database.player_existanse(player_id)):
            return welcome_on_server(player_id, user_message)
        user_player = Database.PlayerGet(player_id)
        if user_player['id'] in SoloPlay:
            return SoloMode(player_id, user_message, user_message_id)
        while (player_id in GameSession):
            time.sleep(0.2)
        commands = str(user_message).split(' ')
        input_command = commands[0].lower()
        if input_command == "–ø—Ä–æ—Ñ–∏–ª—å" or input_command == "/profile":
            user_player = Database.PlayerGet(player_id)
            return send_message(player_id, f"""
üë®üèº‚Äçüíª –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_player['nick']}</b>

üÜîÔ∏è –ò–≥—Ä–æ–≤–æ–π ID: {user_player['id']}
üèÜ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤: {user_player['score']}
""")
        elif (input_command == "—Å–æ–ª–æ" or input_command == "/solo"):
            GameSession.append(player_id)
            generated_word = WordGenerator.get_word_from_list()
            StartTs = int(time.time())
            user_player = Database.PlayerGet(player_id)
            game_id = Database.GameSoloInit(
                user_player['id'],
                StartTs,
                generated_word
            )
            Game = Database.get_info(game_id)
            SoloPlay[user_player['id']] = game_id
            SoloGames[game_id] = list()
            print(f"""
S-Game #{Game['id']} | {user_player['nick']} | Word: {Game['word']}
""")
            send_message(player_id, f"""
            –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –æ–¥–Ω—É –±—É–∫–≤—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –ª–∏–±–æ –∂–µ –Ω–∞–∑–≤–∞—Ç—å —Å–ª–æ–≤–æ —Ü–µ–ª–∏–∫–æ–º, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.
            ‚ÑπÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ï—Å–ª–∏ –≤—ã –Ω–µ —É–≥–∞–¥–∞–µ—Ç–µ —Å–ª–æ–≤–æ —Ü–µ–ª–∏–∫–æ–º, —Ç–æ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ 2 –ø–æ–ø—ã—Ç–∫–∏.   
            """)
            MessagesSolo[game_id] = word_guessing(player_id, Game)
            GameSession.remove(player_id)
            return
        elif (input_command == "—Ä–µ–π—Ç–∏–Ω–≥" or input_command == "/rate"):
            Rating = Database.PlayerRating()
            rating_text = "üìä –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤: \n"
            place = 1
            for PlayerS in Rating:
                rating_text += '\n'
                rating_text += f"#{place} {'<b>' if (PlayerS['id'] == user_player['id']) else ''}{PlayerS['nick']} ({PlayerS['id']}){'</b>' if (PlayerS['id'] == user_player['id']) else ''} - {PlayerS['score']} –æ—á–∫–æ–≤."
                place += 1
            rating_text += '\n'
            rating_text += f"–£ –≤–∞—Å - <b>{user_player['score']}</b> –æ—á–∫–æ–≤."
            rating_text += '\n\n'
            rating_text += '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã –≤ <b>–°–æ–ª–æ</b> —Ä–µ–∂–∏–º–µ:'
            LastGames = Database.GameLastSolo(user_player['id'])
            if len(LastGames) == 0:
                rating_text += '<pre>–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä</pre>'
            else:
                for n in LastGames:
                    rating_text += '\n'
                    rating_text += f"–ò–≥—Ä–∞ <b>{n['id']}</b> | –°–ª–æ–≤–æ: <b>{n['word']}</b> | –†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{'–ü–æ–±–µ–¥–∞' if n['attemps'] > 0 else '–ü—Ä–æ–∏–≥—Ä—ã—à'}</b>"
            rating_text += '\n\n'
            send_message(player_id, rating_text)
        elif (input_command == "/rules") or (input_command == "–ø—Ä–∞–≤–∏–ª–∞"):
            return send_message(player_id, Config.Rules)
        else:
            send_message(player_id, """
üë©üèª‚Äçüíª <pre>–ü—Ä–æ—Ñ–∏–ª—å</pre> - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ –≤ –±–æ—Ç–µ. (/profile)

üßç‚ÄçÔ∏è <pre>–°–æ–ª–æ</pre> - –ù–∞—á–∞—Ç—å –æ–¥–∏–Ω–æ—á–Ω—É—é –∏–≥—Ä—É. (/solo)
–ó–∞ –ø–æ–±–µ–¥—É –≤ –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏–≥—Ä–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å <b>–º–∞–∫—Å–∏—É–º 10 –æ—á–∫–æ–≤ (—Ç–æ–±–∏—à –æ—Ç–ª 10)</b>.
n –æ—á–∫–æ–≤ - —Å–ª–æ–≤–æ —É–≥–∞–¥–∞–Ω–æ –ø–æ –±—É–∫–≤–∞–º –∑–∞ n –∏—Ç–µ—Ä–∞—Ü–∏–π –Ω–µ –±–æ–ª–µ–µ 8. –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —É–¥3.
2 –æ—á–∫–∞ - —Å–ª–æ–≤–æ —É–≥–∞–¥–∞–Ω–æ —Å—Ä–∞–∑—É.

üèÜ <pre>–†–µ–π—Ç–∏–Ω–≥</pre> - –¢–û–ü –∏–≥—Ä–æ–∫–æ–≤ –∏ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥. (/rate)
–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—è—Ç—ë—Ä–∫—É –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤, –∞ —Ç–∞–∫–∂–µ –ø–æ—Å–ª–µ–¥–Ω—é—é –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö –∏–≥—Ä.

‚ùó <pre>–ü—Ä–∞–≤–∏–ª–∞</pre> - –í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã. (/rules)
–ê —Ç–∞–∫–∂–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤.

""")


polling_thread = threading.Thread(target=bot_polling)
polling_thread.daemon = True
polling_thread.start()

if __name__ == "__main__":
    while True:
        try:
            time.sleep(120)
        except KeyboardInterrupt:
            break
